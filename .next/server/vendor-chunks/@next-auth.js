"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@next-auth";
exports.ids = ["vendor-chunks/@next-auth"];
exports.modules = {

/***/ "(rsc)/./node_modules/@next-auth/dynamodb-adapter/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/@next-auth/dynamodb-adapter/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DynamoDBAdapter: () => (/* binding */ DynamoDBAdapter),\n/* harmony export */   format: () => (/* binding */ format),\n/* harmony export */   generateUpdateExpression: () => (/* binding */ generateUpdateExpression)\n/* harmony export */ });\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/**\n * <div style={{display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", padding: 16}}>\n *  <p style={{fontWeight: \"normal\"}}>Official <a href=\"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/Introduction.html\">DynamoDB</a> adapter for Auth.js / NextAuth.js.</p>\n *  <a href=\"https://docs.aws.amazon.com/dynamodb/index.html\">\n *   <img style={{display: \"block\"}} src=\"https://authjs.dev/img/adapters/dynamodb.png\" width=\"48\"/>\n *  </a>\n * </div>\n *\n * ## Installation\n *\n * ```bash npm2yarn2pnpm\n * npm install next-auth @next-auth/dynamodb-adapter\n * ```\n *\n * @module @next-auth/dynamodb-adapter\n */\n\n/**\n * ## Setup\n *\n * By default, the adapter expects a table with a partition key `pk` and a sort key `sk`, as well as a global secondary index named `GSI1` with `GSI1PK` as partition key and `GSI1SK` as sorting key. To automatically delete sessions and verification requests after they expire using [dynamodb TTL](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/TTL.html) you should [enable the TTL](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/time-to-live-ttl-how-to.html) with attribute name 'expires'. You can set whatever you want as the table name and the billing method.\n * You can find the full schema in the table structure section below.\n *\n * ### Configuring Auth.js\n *\n * You need to pass `DynamoDBDocument` client from the modular [`aws-sdk`](https://docs.aws.amazon.com/sdk-for-javascript/v3/developer-guide/dynamodb-example-dynamodb-utilities.html) v3 to the adapter.\n * The default table name is `next-auth`, but you can customise that by passing `{ tableName: 'your-table-name' }` as the second parameter in the adapter.\n *\n * ```javascript title=\"pages/api/auth/[...nextauth].js\"\n * import { DynamoDB, DynamoDBClientConfig } from \"@aws-sdk/client-dynamodb\"\n * import { DynamoDBDocument } from \"@aws-sdk/lib-dynamodb\"\n * import NextAuth from \"next-auth\";\n * import Providers from \"next-auth/providers\";\n * import { DynamoDBAdapter } from \"@next-auth/dynamodb-adapter\"\n *\n * const config: DynamoDBClientConfig = {\n *   credentials: {\n *     accessKeyId: process.env.NEXT_AUTH_AWS_ACCESS_KEY as string,\n *     secretAccessKey: process.env.NEXT_AUTH_AWS_SECRET_KEY as string,\n *   },\n *   region: process.env.NEXT_AUTH_AWS_REGION,\n * };\n *\n * const client = DynamoDBDocument.from(new DynamoDB(config), {\n *   marshallOptions: {\n *     convertEmptyValues: true,\n *     removeUndefinedValues: true,\n *     convertClassInstanceToMap: true,\n *   },\n * })\n *\n * export default NextAuth({\n *   // Configure one or more authentication providers\n *   providers: [\n *     Providers.GitHub({\n *       clientId: process.env.GITHUB_ID,\n *       clientSecret: process.env.GITHUB_SECRET,\n *     }),\n *     Providers.Email({\n *       server: process.env.EMAIL_SERVER,\n *       from: process.env.EMAIL_FROM,\n *     }),\n *     // ...add more providers here\n *   ],\n *   adapter: DynamoDBAdapter(\n *     client\n *   ),\n *   ...\n * });\n * ```\n *\n * (AWS secrets start with `NEXT_AUTH_` in order to not conflict with [Vercel's reserved environment variables](https://vercel.com/docs/environment-variables#reserved-environment-variables).)\n *\n * ## Advanced usage\n *\n * ### Default schema\n *\n * The table respects the single table design pattern. This has many advantages:\n *\n * - Only one table to manage, monitor and provision.\n * - Querying relations is faster than with multi-table schemas (for eg. retrieving all sessions for a user).\n * - Only one table needs to be replicated if you want to go multi-region.\n *\n * > This schema is adapted for use in DynamoDB and based upon our main [schema](https://authjs.dev/reference/adapters#models)\n *\n * ![DynamoDB Table](https://i.imgur.com/hGZtWDq.png)\n *\n * You can create this table with infrastructure as code using [`aws-cdk`](https://github.com/aws/aws-cdk) with the following table definition:\n *\n * ```javascript title=stack.ts\n * new dynamodb.Table(this, `NextAuthTable`, {\n *   tableName: \"next-auth\",\n *   partitionKey: { name: \"pk\", type: dynamodb.AttributeType.STRING },\n *   sortKey: { name: \"sk\", type: dynamodb.AttributeType.STRING },\n *   timeToLiveAttribute: \"expires\",\n * }).addGlobalSecondaryIndex({\n *   indexName: \"GSI1\",\n *   partitionKey: { name: \"GSI1PK\", type: dynamodb.AttributeType.STRING },\n *   sortKey: { name: \"GSI1SK\", type: dynamodb.AttributeType.STRING },\n * })\n * ```\n *\n * Alternatively, you can use this cloudformation template:\n *\n * ```yaml title=cloudformation.yaml\n * NextAuthTable:\n *   Type: \"AWS::DynamoDB::Table\"\n *   Properties:\n *     TableName: next-auth\n *     AttributeDefinitions:\n *       - AttributeName: pk\n *         AttributeType: S\n *       - AttributeName: sk\n *         AttributeType: S\n *       - AttributeName: GSI1PK\n *         AttributeType: S\n *       - AttributeName: GSI1SK\n *         AttributeType: S\n *     KeySchema:\n *       - AttributeName: pk\n *         KeyType: HASH\n *       - AttributeName: sk\n *         KeyType: RANGE\n *     GlobalSecondaryIndexes:\n *       - IndexName: GSI1\n *         Projection:\n *           ProjectionType: ALL\n *         KeySchema:\n *           - AttributeName: GSI1PK\n *             KeyType: HASH\n *           - AttributeName: GSI1SK\n *             KeyType: RANGE\n *     TimeToLiveSpecification:\n *       AttributeName: expires\n *       Enabled: true\n * ```\n *\n * ### Using a custom schema\n *\n * You can configure your custom table schema by passing the `options` key to the adapter constructor:\n *\n * ```javascript\n * const adapter = DynamoDBAdapter(client, {\n *   tableName: \"custom-table-name\",\n *   partitionKey: \"custom-pk\",\n *   sortKey: \"custom-sk\",\n *   indexName: \"custom-index-name\",\n *   indexPartitionKey: \"custom-index-pk\",\n *   indexSortKey: \"custom-index-sk\",\n * })\n * ```\n **/\nfunction DynamoDBAdapter(client, options) {\n    const TableName = options?.tableName ?? \"next-auth\";\n    const pk = options?.partitionKey ?? \"pk\";\n    const sk = options?.sortKey ?? \"sk\";\n    const IndexName = options?.indexName ?? \"GSI1\";\n    const GSI1PK = options?.indexPartitionKey ?? \"GSI1PK\";\n    const GSI1SK = options?.indexSortKey ?? \"GSI1SK\";\n    return {\n        async createUser(data) {\n            const user = {\n                ...data,\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n            };\n            await client.put({\n                TableName,\n                Item: format.to({\n                    ...user,\n                    [pk]: `USER#${user.id}`,\n                    [sk]: `USER#${user.id}`,\n                    type: \"USER\",\n                    [GSI1PK]: `USER#${user.email}`,\n                    [GSI1SK]: `USER#${user.email}`,\n                }),\n            });\n            return user;\n        },\n        async getUser(userId) {\n            const data = await client.get({\n                TableName,\n                Key: {\n                    [pk]: `USER#${userId}`,\n                    [sk]: `USER#${userId}`,\n                },\n            });\n            return format.from(data.Item);\n        },\n        async getUserByEmail(email) {\n            const data = await client.query({\n                TableName,\n                IndexName,\n                KeyConditionExpression: \"#gsi1pk = :gsi1pk AND #gsi1sk = :gsi1sk\",\n                ExpressionAttributeNames: {\n                    \"#gsi1pk\": GSI1PK,\n                    \"#gsi1sk\": GSI1SK,\n                },\n                ExpressionAttributeValues: {\n                    \":gsi1pk\": `USER#${email}`,\n                    \":gsi1sk\": `USER#${email}`,\n                },\n            });\n            return format.from(data.Items?.[0]);\n        },\n        async getUserByAccount({ provider, providerAccountId }) {\n            const data = await client.query({\n                TableName,\n                IndexName,\n                KeyConditionExpression: \"#gsi1pk = :gsi1pk AND #gsi1sk = :gsi1sk\",\n                ExpressionAttributeNames: {\n                    \"#gsi1pk\": GSI1PK,\n                    \"#gsi1sk\": GSI1SK,\n                },\n                ExpressionAttributeValues: {\n                    \":gsi1pk\": `ACCOUNT#${provider}`,\n                    \":gsi1sk\": `ACCOUNT#${providerAccountId}`,\n                },\n            });\n            if (!data.Items?.length)\n                return null;\n            const accounts = data.Items[0];\n            const res = await client.get({\n                TableName,\n                Key: {\n                    [pk]: `USER#${accounts.userId}`,\n                    [sk]: `USER#${accounts.userId}`,\n                },\n            });\n            return format.from(res.Item);\n        },\n        async updateUser(user) {\n            const { UpdateExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = generateUpdateExpression(user);\n            const data = await client.update({\n                TableName,\n                Key: {\n                    // next-auth type is incorrect it should be Partial<AdapterUser> & {id: string} instead of just Partial<AdapterUser>\n                    [pk]: `USER#${user.id}`,\n                    [sk]: `USER#${user.id}`,\n                },\n                UpdateExpression,\n                ExpressionAttributeNames,\n                ExpressionAttributeValues,\n                ReturnValues: \"ALL_NEW\",\n            });\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            return format.from(data.Attributes);\n        },\n        async deleteUser(userId) {\n            // query all the items related to the user to delete\n            const res = await client.query({\n                TableName,\n                KeyConditionExpression: \"#pk = :pk\",\n                ExpressionAttributeNames: { \"#pk\": pk },\n                ExpressionAttributeValues: { \":pk\": `USER#${userId}` },\n            });\n            if (!res.Items)\n                return null;\n            const items = res.Items;\n            // find the user we want to delete to return at the end of the function call\n            const user = items.find((item) => item.type === \"USER\");\n            const itemsToDelete = items.map((item) => {\n                return {\n                    DeleteRequest: {\n                        Key: {\n                            [sk]: item.sk,\n                            [pk]: item.pk,\n                        },\n                    },\n                };\n            });\n            // batch write commands cannot handle more than 25 requests at once\n            const itemsToDeleteMax = itemsToDelete.slice(0, 25);\n            const param = {\n                RequestItems: { [TableName]: itemsToDeleteMax },\n            };\n            await client.batchWrite(param);\n            return format.from(user);\n        },\n        async linkAccount(data) {\n            const item = {\n                ...data,\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n                [pk]: `USER#${data.userId}`,\n                [sk]: `ACCOUNT#${data.provider}#${data.providerAccountId}`,\n                [GSI1PK]: `ACCOUNT#${data.provider}`,\n                [GSI1SK]: `ACCOUNT#${data.providerAccountId}`,\n            };\n            await client.put({ TableName, Item: format.to(item) });\n            return data;\n        },\n        async unlinkAccount({ provider, providerAccountId }) {\n            const data = await client.query({\n                TableName,\n                IndexName,\n                KeyConditionExpression: \"#gsi1pk = :gsi1pk AND #gsi1sk = :gsi1sk\",\n                ExpressionAttributeNames: {\n                    \"#gsi1pk\": GSI1PK,\n                    \"#gsi1sk\": GSI1SK,\n                },\n                ExpressionAttributeValues: {\n                    \":gsi1pk\": `ACCOUNT#${provider}`,\n                    \":gsi1sk\": `ACCOUNT#${providerAccountId}`,\n                },\n            });\n            const account = format.from(data.Items?.[0]);\n            if (!account)\n                return;\n            await client.delete({\n                TableName,\n                Key: {\n                    [pk]: `USER#${account.userId}`,\n                    [sk]: `ACCOUNT#${provider}#${providerAccountId}`,\n                },\n                ReturnValues: \"ALL_OLD\",\n            });\n            return account;\n        },\n        async getSessionAndUser(sessionToken) {\n            const data = await client.query({\n                TableName,\n                IndexName,\n                KeyConditionExpression: \"#gsi1pk = :gsi1pk AND #gsi1sk = :gsi1sk\",\n                ExpressionAttributeNames: {\n                    \"#gsi1pk\": GSI1PK,\n                    \"#gsi1sk\": GSI1SK,\n                },\n                ExpressionAttributeValues: {\n                    \":gsi1pk\": `SESSION#${sessionToken}`,\n                    \":gsi1sk\": `SESSION#${sessionToken}`,\n                },\n            });\n            const session = format.from(data.Items?.[0]);\n            if (!session)\n                return null;\n            const res = await client.get({\n                TableName,\n                Key: {\n                    [pk]: `USER#${session.userId}`,\n                    [sk]: `USER#${session.userId}`,\n                },\n            });\n            const user = format.from(res.Item);\n            if (!user)\n                return null;\n            return { user, session };\n        },\n        async createSession(data) {\n            const session = {\n                id: (0,uuid__WEBPACK_IMPORTED_MODULE_0__[\"default\"])(),\n                ...data,\n            };\n            await client.put({\n                TableName,\n                Item: format.to({\n                    [pk]: `USER#${data.userId}`,\n                    [sk]: `SESSION#${data.sessionToken}`,\n                    [GSI1SK]: `SESSION#${data.sessionToken}`,\n                    [GSI1PK]: `SESSION#${data.sessionToken}`,\n                    type: \"SESSION\",\n                    ...data,\n                }),\n            });\n            return session;\n        },\n        async updateSession(session) {\n            const { sessionToken } = session;\n            const data = await client.query({\n                TableName,\n                IndexName,\n                KeyConditionExpression: \"#gsi1pk = :gsi1pk AND #gsi1sk = :gsi1sk\",\n                ExpressionAttributeNames: {\n                    \"#gsi1pk\": GSI1PK,\n                    \"#gsi1sk\": GSI1SK,\n                },\n                ExpressionAttributeValues: {\n                    \":gsi1pk\": `SESSION#${sessionToken}`,\n                    \":gsi1sk\": `SESSION#${sessionToken}`,\n                },\n            });\n            if (!data.Items?.length)\n                return null;\n            const { pk, sk } = data.Items[0];\n            const { UpdateExpression, ExpressionAttributeNames, ExpressionAttributeValues, } = generateUpdateExpression(session);\n            const res = await client.update({\n                TableName,\n                Key: { pk, sk },\n                UpdateExpression,\n                ExpressionAttributeNames,\n                ExpressionAttributeValues,\n                ReturnValues: \"ALL_NEW\",\n            });\n            return format.from(res.Attributes);\n        },\n        async deleteSession(sessionToken) {\n            const data = await client.query({\n                TableName,\n                IndexName,\n                KeyConditionExpression: \"#gsi1pk = :gsi1pk AND #gsi1sk = :gsi1sk\",\n                ExpressionAttributeNames: {\n                    \"#gsi1pk\": GSI1PK,\n                    \"#gsi1sk\": GSI1SK,\n                },\n                ExpressionAttributeValues: {\n                    \":gsi1pk\": `SESSION#${sessionToken}`,\n                    \":gsi1sk\": `SESSION#${sessionToken}`,\n                },\n            });\n            if (!data?.Items?.length)\n                return null;\n            const { pk, sk } = data.Items[0];\n            const res = await client.delete({\n                TableName,\n                Key: { pk, sk },\n                ReturnValues: \"ALL_OLD\",\n            });\n            return format.from(res.Attributes);\n        },\n        async createVerificationToken(data) {\n            await client.put({\n                TableName,\n                Item: format.to({\n                    [pk]: `VT#${data.identifier}`,\n                    [sk]: `VT#${data.token}`,\n                    type: \"VT\",\n                    ...data,\n                }),\n            });\n            return data;\n        },\n        async useVerificationToken({ identifier, token }) {\n            const data = await client.delete({\n                TableName,\n                Key: {\n                    [pk]: `VT#${identifier}`,\n                    [sk]: `VT#${token}`,\n                },\n                ReturnValues: \"ALL_OLD\",\n            });\n            return format.from(data.Attributes);\n        },\n    };\n}\n// https://github.com/honeinc/is-iso-date/blob/master/index.js\nconst isoDateRE = /(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d\\.\\d+([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))|(\\d{4}-[01]\\d-[0-3]\\dT[0-2]\\d:[0-5]\\d([+-][0-2]\\d:[0-5]\\d|Z))/;\nfunction isDate(value) {\n    return value && isoDateRE.test(value) && !isNaN(Date.parse(value));\n}\nconst format = {\n    /** Takes a plain old JavaScript object and turns it into a Dynamodb object */\n    to(object) {\n        const newObject = {};\n        for (const key in object) {\n            const value = object[key];\n            if (value instanceof Date) {\n                // DynamoDB requires the TTL attribute be a UNIX timestamp (in secs).\n                if (key === \"expires\")\n                    newObject[key] = value.getTime() / 1000;\n                else\n                    newObject[key] = value.toISOString();\n            }\n            else\n                newObject[key] = value;\n        }\n        return newObject;\n    },\n    /** Takes a Dynamo object and returns a plain old JavaScript object */\n    from(object) {\n        if (!object)\n            return null;\n        const newObject = {};\n        for (const key in object) {\n            // Filter DynamoDB specific attributes so it doesn't get passed to core,\n            // to avoid revealing the type of database\n            if ([\"pk\", \"sk\", \"GSI1PK\", \"GSI1SK\"].includes(key))\n                continue;\n            const value = object[key];\n            if (isDate(value))\n                newObject[key] = new Date(value);\n            // hack to keep type property in account\n            else if (key === \"type\" && [\"SESSION\", \"VT\", \"USER\"].includes(value))\n                continue;\n            // The expires property is stored as a UNIX timestamp in seconds, but\n            // JavaScript needs it in milliseconds, so multiply by 1000.\n            else if (key === \"expires\" && typeof value === \"number\")\n                newObject[key] = new Date(value * 1000);\n            else\n                newObject[key] = value;\n        }\n        return newObject;\n    },\n};\nfunction generateUpdateExpression(object) {\n    const formattedSession = format.to(object);\n    let UpdateExpression = \"set\";\n    const ExpressionAttributeNames = {};\n    const ExpressionAttributeValues = {};\n    for (const property in formattedSession) {\n        UpdateExpression += ` #${property} = :${property},`;\n        ExpressionAttributeNames[\"#\" + property] = property;\n        ExpressionAttributeValues[\":\" + property] = formattedSession[property];\n    }\n    UpdateExpression = UpdateExpression.slice(0, -1);\n    return {\n        UpdateExpression,\n        ExpressionAttributeNames,\n        ExpressionAttributeValues,\n    };\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@next-auth/dynamodb-adapter/index.js\n");

/***/ })

};
;